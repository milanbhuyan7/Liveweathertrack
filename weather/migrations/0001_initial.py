# Generated by Django 5.2.4 on 2025-08-24 09:43

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('country_code', models.CharField(max_length=2)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Cities',
                'unique_together': {('name', 'country_code')},
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('temperature_unit', models.CharField(choices=[('C', 'Celsius'), ('F', 'Fahrenheit')], default='C', max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_cities', models.ManyToManyField(blank=True, to='weather.city')),
            ],
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField()),
                ('feels_like', models.FloatField()),
                ('humidity', models.IntegerField()),
                ('pressure', models.FloatField()),
                ('weather_main', models.CharField(max_length=50)),
                ('weather_description', models.CharField(max_length=100)),
                ('weather_icon', models.CharField(max_length=10)),
                ('wind_speed', models.FloatField()),
                ('wind_direction', models.IntegerField()),
                ('visibility', models.IntegerField(blank=True, null=True)),
                ('uv_index', models.FloatField(blank=True, null=True)),
                ('cached_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_data', to='weather.city')),
            ],
            options={
                'ordering': ['-cached_at'],
            },
        ),
        migrations.CreateModel(
            name='ForecastData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_date', models.DateTimeField()),
                ('temperature_min', models.FloatField()),
                ('temperature_max', models.FloatField()),
                ('temperature_day', models.FloatField()),
                ('temperature_night', models.FloatField()),
                ('humidity', models.IntegerField()),
                ('pressure', models.FloatField()),
                ('weather_main', models.CharField(max_length=50)),
                ('weather_description', models.CharField(max_length=100)),
                ('weather_icon', models.CharField(max_length=10)),
                ('wind_speed', models.FloatField()),
                ('wind_direction', models.IntegerField()),
                ('cached_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forecast_data', to='weather.city')),
            ],
            options={
                'ordering': ['forecast_date'],
                'unique_together': {('city', 'forecast_date')},
            },
        ),
    ]
